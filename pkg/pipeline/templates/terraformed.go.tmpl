{{ .Header }}

{{ .GenStatement }}

package {{ .CRD.APIVersion }}

import (
   "github.com/crossplane/crossplane-runtime/pkg/meta"
   "github.com/pkg/errors"

	"github.com/crossplane-contrib/terrajet/pkg/resource"
	"github.com/crossplane-contrib/terrajet/pkg/resource/json"
	{{ .Imports }}
)

// GetTerraformResourceType returns Terraform resource type for this {{ .CRD.Kind }}
func (mg *{{ .CRD.Kind }}) GetTerraformResourceType() string {
	return "{{ .Terraform.ResourceType }}"
}

// GetTerraformResourceIDField returns Terraform identifier field for this {{ .CRD.Kind }}
func (tr *{{ .CRD.Kind }}) GetTerraformResourceIDField() string {
	return "{{ .Terraform.IdentifierField }}"
}

// GetObservation of this {{ .CRD.Kind }}
func (tr *{{ .CRD.Kind }}) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this {{ .CRD.Kind }}
func (tr *{{ .CRD.Kind }}) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetParameters of this {{ .CRD.Kind }}
func (tr *{{ .CRD.Kind }}) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	{{- if .CRD.ConfigureExternalName }}
	{{ .CRD.ConfigureExternalName }}(base, meta.GetExternalName(tr))
	{{- end }}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this {{ .CRD.Kind }}
func (tr *{{ .CRD.Kind }}) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this {{ .CRD.Kind }} using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *{{ .CRD.Kind }}) LateInitialize(attrs []byte) (bool, error) {
	params := &{{ .CRD.Kind }}Parameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	li := resource.NewGenericLateInitializer(resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard),
		resource.WithZeroElemPtrFilter(resource.CNameWildcard))
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package pipeline

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/muvaf/typewriter/pkg/packages"
	twtypes "github.com/muvaf/typewriter/pkg/types"
	"github.com/muvaf/typewriter/pkg/wrapper"
	"github.com/pkg/errors"

	"github.com/crossplane-contrib/terrajet/pkg/pipeline/templates"
	tjtypes "github.com/crossplane-contrib/terrajet/pkg/types"
)

// GenStatement is printed on every generated file.
const GenStatement = "// Code generated by terrajet. DO NOT EDIT."

// NewCRDGenerator returns a new CRDGenerator.
func NewCRDGenerator(rootPath, group, version, kind string, schema *schema.Resource) *CRDGenerator {
	cg := &CRDGenerator{
		RootPath:                rootPath,
		Group:                   group,
		Version:                 version,
		Kind:                    kind,
		TerraformResourceSchema: schema,
		cache:                   packages.NewCache(),
	}
	return cg
}

// CRDGenerator takes certain information referencing Terraform resource definition
// and writes kubebuilder CRD file.
type CRDGenerator struct {
	RootPath                string
	Group                   string
	Version                 string
	Kind                    string
	TerraformResourceSchema *schema.Resource

	cache *packages.Cache
}

// Generate builds and writes a new CRD out of Terraform resource definition.
func (cg *CRDGenerator) Generate() error {
	pkgPath := filepath.Join(cg.RootPath, "apis", strings.ToLower(strings.Split(cg.Group, ".")[0]), strings.ToLower(cg.Version))
	pkg, err := cg.cache.GetPackage(pkgPath)
	if err != nil {
		return errors.Wrap(err, "cannot load target package")
	}
	file := wrapper.NewFile(pkg.PkgPath, pkg.Name, templates.CRDTypesTemplate,
		wrapper.WithGenStatement(GenStatement),
		wrapper.WithHeaderPath("hack/boilerplate.go.txt"), // todo
	)
	typeList := tjtypes.NewBuilder(cg.Kind, cg.TerraformResourceSchema, pkg.Types).Build()
	typePrinter := twtypes.NewTypePrinter(file.Imports, pkg.Types.Scope())
	typesStr, err := typePrinter.Print(typeList)
	if err != nil {
		return errors.Wrap(err, "cannot print the type list")
	}
	vars := map[string]interface{}{
		"Types": typesStr,
		"CRD": map[string]string{
			"APIVersion": cg.Version,
			"Group":      cg.Group,
			"Kind":       cg.Kind,
		},
	}
	data, err := file.Wrap(vars)
	if err != nil {
		return errors.Wrap(err, "cannot wrap file")
	}
	if err := os.MkdirAll(pkgPath, os.ModePerm); err != nil {
		return errors.Wrap(err, "cannot create directory for crd")
	}
	filePath := filepath.Join(pkgPath, fmt.Sprintf("zz_%s_types.go", strings.ToLower(cg.Kind)))
	return errors.Wrap(os.WriteFile(filePath, data, os.FileMode(0o664)), "cannot write crd file")
}
